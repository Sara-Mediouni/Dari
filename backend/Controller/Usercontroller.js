const User = require("../model/User");
const bcrypt = require("bcryptjs");
const firebaseAdmin = require('firebase-admin');
const Command = require("../model/Commande");
const serviceAccount = require("./dari-28cfd-firebase-adminsdk-fbsvc-19a4019b91.json");

// Initialisation de Firebase Admin
firebaseAdmin.initializeApp({
  credential: firebaseAdmin.credential.cert(serviceAccount),
});

// Contr√¥leur d'inscription
const SignUp = async (req, res) => {
  try {
    const { name, email, password, uid } = req.body;
    console.log('üì• Donn√©es re√ßues:', req.body);

    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      console.log('‚ö†Ô∏è Utilisateur d√©j√† existant:', existingUser);
      return res.status(400).json({ message: "Email d√©j√† utilis√©" });
    }

    // Hash du mot de passe (optionnel si tu veux renforcer la s√©curit√© m√™me si Firebase est utilis√©)
    const hashedPassword = await bcrypt.hash(password, 10);

    // Cr√©ation du nouvel utilisateur
    const newUser = new User({
      name,
      email,
      password: hashedPassword, // Sauvegarde du mot de passe hash√©
      uid
    });

    console.log('üÜï Nouvel utilisateur √† enregistrer:', newUser);

    // Sauvegarde dans la base de donn√©es
    await newUser.save();

    console.log('‚úÖ Utilisateur sauvegard√© avec succ√®s:', newUser);
    res.status(201).json({ message: 'Utilisateur cr√©√© avec succ√®s', user: newUser });

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'enregistrement:', error);
    res.status(500).json({ message: 'Erreur interne du serveur', error: error.message });
  }
};

// Contr√¥leur pour ajouter une commande √† un utilisateur
const addOrderToUser = async (req, res) => {
  try {
    const { uid, id } = req.params;

    // Trouver l'utilisateur par son UID
    const user = await User.findOne({ uid });
    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    // Trouver la commande par son ID
    const order = await Command.findById(id);
    if (!order) {
      return res.status(404).json({ message: "Commande non trouv√©e" });
    }

    // Ajouter la commande au tableau des commandes de l'utilisateur
    user.commande.push(order._id); // Assure-toi que "commande" est bien un tableau de type [ObjectId] dans ton mod√®le
    await user.save();

    return res.status(200).json({ message: "Commande ajout√©e avec succ√®s √† l'utilisateur" });

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ajout de la commande:', error);
    res.status(500).json({ message: 'Erreur interne du serveur', error: error.message });
  }
};

module.exports = { SignUp, addOrderToUser };
